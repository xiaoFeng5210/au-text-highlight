{"version":3,"file":"bundle.esm.js","sources":["../src/core/sectionRange.ts","../src/core/index.ts"],"sourcesContent":["export default (container: Node, positions: { start: number, end: number }[]) => {\n  // Selection 对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素。通常由用户拖拽鼠标经过文字而产生\n  const selection = document?.getSelection()\n  if (!selection) {\n    throw new Error('No selection found')\n  }\n\n  selection.removeAllRanges()\n  positions.forEach(({ start, end }) => {\n    const range = document.createRange()\n    range.setStart((container as any).firstChild, start)\n    range.setEnd((container as any).firstChild, end)\n    selection.addRange(range)\n  })\n}\n","import type { DeafultConfig } from '../types'\n\n/**\n * 构建正则\n * @param keywords\n */\nexport function createRegexFromKeywords(keywords: string | string[]): RegExp | undefined {\n  if (typeof keywords === 'string') {\n    return new RegExp(`\\\\b${keywords}\\\\b`, 'gi')\n  }\n  if (Array.isArray(keywords)) {\n    // 将所有关键字用 | 分隔，并加入 \\b 以确保匹配整个单词，关键字先进行转义\n    return new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'gi')\n  }\n}\n\nexport function matchKeywordsWithPositions(str: string, keywords: string | string[]) {\n  const regex = createRegexFromKeywords(keywords)\n  const matches = []\n  let match: RegExpExecArray | null\n\n  // 使用 exec 遍历所有匹配项\n  // eslint-disable-next-line no-cond-assign\n  while ((match = (regex as RegExp).exec(str)) !== null) {\n    matches.push({\n      keyword: match[0],\n      start: match.index,\n      end: match.index + match[0].length,\n    })\n  }\n\n  return matches\n}\n\n/**\n * 核心方法\n * @param config\n */\nexport function textHighlight(config: DeafultConfig) {\n  const { text, keywords } = config\n  return matchKeywordsWithPositions(text, keywords)\n}\n"],"names":["sectionRange","container","positions","selection","document","getSelection","Error","removeAllRanges","forEach","_a","start","end","range","createRange","setStart","firstChild","setEnd","addRange","matchKeywordsWithPositions","str","keywords","match","regex","RegExp","concat","Array","isArray","join","createRegexFromKeywords","matches","exec","push","keyword","index","length","textHighlight","config","text"],"mappings":"AAAA,IAAAA,EAAe,SAACC,EAAiBC,GAE/B,IAAMC,EAAY,OAAAC,mBAAAA,gBAAAA,SAAUC,eAC5B,IAAKF,EACH,MAAM,IAAIG,MAAM,sBAGlBH,EAAUI,kBACVL,EAAUM,SAAQ,SAACC,OAAEC,EAAKD,EAAAC,MAAEC,EAAGF,EAAAE,IACvBC,EAAQR,SAASS,cACvBD,EAAME,SAAUb,EAAkBc,WAAYL,GAC9CE,EAAMI,OAAQf,EAAkBc,WAAYJ,GAC5CR,EAAUc,SAASL,EACrB,GACD,ECEe,SAAAM,EAA2BC,EAAaC,GAOtD,IANA,IAEIC,EAFEC,EAXF,SAAkCF,GACtC,MAAwB,iBAAbA,EACF,IAAIG,OAAO,MAAAC,OAAMJ,EAAa,OAAE,MAErCK,MAAMC,QAAQN,GAET,IAAIG,OAAO,OAAAC,OAAOJ,EAASO,KAAK,KAAI,QAAQ,WAFrD,CAIF,CAGgBC,CAAwBR,GAChCS,EAAU,GAKiC,QAAzCR,EAASC,EAAiBQ,KAAKX,KACrCU,EAAQE,KAAK,CACXC,QAASX,EAAM,GACfX,MAAOW,EAAMY,MACbtB,IAAKU,EAAMY,MAAQZ,EAAM,GAAGa,SAIhC,OAAOL,CACT,CAMM,SAAUM,EAAcC,GAE5B,OAAOlB,EADoBkB,EAAMC,KAAND,EAAMhB,SAEnC"}